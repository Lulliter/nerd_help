[
  {
    "objectID": "shell/shell_intro.html",
    "href": "shell/shell_intro.html",
    "title": "Intro to Unix and shell",
    "section": "",
    "text": "Great (paid) LinkedIn course by Kevin Skoglund “Unix essential training”\n\n\nan OS developed by AT&T employes at Bell Labs in the 1960s/70s\nin 1972 it is rewritten in C programming, which made it portable. It then spread outside AT&T\nit still powers devises all around\nyou can use it from the Command line or from GUI interfaces\n\n\n\nkernel is the core of the OS. it allocates time and memory to processes\n\nshells is the outer layer of the OS. it sends reuqests to the kernel\n\nyou can choose from different shells (sh, bash, zsh, etc.)",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell/shell_intro.html#based-on-name-filedir",
    "href": "shell/shell_intro.html#based-on-name-filedir",
    "title": "Intro to Unix and shell",
    "section": "… based on name (file|dir)",
    "text": "… based on name (file|dir)\n\nfind . -type d -name \"*MUSIC*\"      # directory\nfind . -iname \"*MUSIC*\"              # file + directory",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell/shell_intro.html#based-on-name-filedir-word-in-text-file",
    "href": "shell/shell_intro.html#based-on-name-filedir-word-in-text-file",
    "title": "Intro to Unix and shell",
    "section": "… based on name (file|dir) + word (in text file)",
    "text": "… based on name (file|dir) + word (in text file)\nfind + grep will only work with text files (R or txt)\n\n\nfind . → Start searching in the current directory\n\n\n-type f → Only look for regular files\n\n-name \"*.R\" → Restrict the search to files ending in .R\n\n\n/( and \\) → bc parenthesis must be escaped\n\n-o → logical OR between conditions\n\n\n\n-exec → For each matching file, execute the following command…\n\n\ngrep -l \"library\" {} + → search for the word “library” in the file ({} filename placeholder)\n\n\n-l tells grep to only print the filename if a match is found\n\n\n\n+ → because -exec clause must be escaped (+ or ;)\n\n\n\n\n# Search for files containing specific content and return the list of files\nfind . -type f -name \"*.R\" -exec grep -l \"library\" {} + # or \nfind . -type f -name \"*.R\" -exec grep -l \"library\" {} \\; \n\nfind . \\( -name \"*.R\" -o -name \"*.qmd\" -o -name \"*.md\" \\) -type f -exec grep -El \"feature|color\" {} +",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell/shell_intro.html#based-on-name-filedir-word-in-pdf-file",
    "href": "shell/shell_intro.html#based-on-name-filedir-word-in-pdf-file",
    "title": "Intro to Unix and shell",
    "section": "… based on name (file|dir) + word (in PDF file)",
    "text": "… based on name (file|dir) + word (in PDF file)\n\n\nsh -c '...' → Run the given string as a shell script\n\nfor file do ... done loops over those filenames\n\ngrep\n\n\n-q → be quiet (don’t print the match)\n\n-i → ignore case\n\n-E → use extended regex (feature|color)\n\n\n\n{} are the filenames from find, passed as $1, $2, …, to the shell script\n\n\ncd ~/Library/CloudS*/GoogleDrive-lmm76@georgetown.edu/'Il mio Drive'/SCP_mio\nls -ls\n\nfind . -type f -name \"*.pdf\" -exec sh -c '\n  for file do\n    if pdftotext \"$file\" - | grep -qiE \"sussidiarietà\"; then\n      echo \"$file\"\n    fi\n  done\n' sh {} +",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell/shell_intro.html#based-on-name-filedir-word-in-word-file",
    "href": "shell/shell_intro.html#based-on-name-filedir-word-in-word-file",
    "title": "Intro to Unix and shell",
    "section": "… based on name (file|dir) + word (in WORD file)",
    "text": "… based on name (file|dir) + word (in WORD file)\nNERDY set up step\n\n# First time I got \nwhich brew\n#/usr/local/bin/brew\n/opt/homebrew/bin/brew --version\n# Homebrew 4.5.0 OK\n\n# configure zsh to use the correct brew\nexport PATH=\"/opt/homebrew/bin:$PATH\"\n# then \nsource ~/.zshrc\nwhich brew\n#/opt/homebrew/bin/brew # OK!\nbrew install docx2txt\n#docx2txt --help # doesnot work!?!?!\n#... but I have it\nwhich docx2txt\nls /opt/homebrew/Cellar/docx2txt/1.4/bin\n# add symlink\nln -s /opt/homebrew/Cellar/docx2txt/1.4/bin/docx2txt.sh /opt/homebrew/bin/docx2txt\nwhich docx2txt\n\nOr to use PANDOC for word files\n\nQuarto and R should use their own pandoc version (so this shouldn’t mess that up!)\n\n\nbrew upgrade pandoc\npandoc --version\nbrew link --overwrite pandoc # from pandoc 1. 2 pandoc 3.6.4\n\nCheck only 1 file’s content\n\ncd ~/Library/CloudS*/GoogleDrive-lmm76@georgetown.edu/'Il mio Drive'/SCP_mio\nls -ls\n\n# `docx2txt` often misses text in text boxes, shapes, footers, or other styled containers\ndocx2txt &lt; ./'Appunti 2o tavolo.docx' - | grep -i \"sviluppo sostenibile\" # NOPE!\n# `pandoc` uses the full internal structure of the .docx file and:\npandoc 'Appunti 2o tavolo.docx' -t plain | grep -i \"sviluppo sostenibile\" # YEP!\n\nGet files list\n\nNeed to transform into text first\n\n\ncd ~/Library/CloudS*/GoogleDrive-lmm76@georgetown.edu/'Il mio Drive'/SCP_mio\nls -ls\n# Using docx2txt (NOPE!)\n# Using pandoc (YEP!)\nfind . -type f -name \"*.docx\" -exec sh -c '\n  for file do\n    if pandoc \"$file\" -t plain | grep -qiE \"sviluppo sostenibile\"; then\n      echo \"$file\"\n    fi\n  done\n' sh {} +\n\n\n# suppress errors (corrupt or *.doc files - NOT handled by pandoc)\nfind . -type f -name \"*.docx\" -exec sh -c '\n  for file do\n    if pandoc \"$file\" -t plain 2&gt;/dev/null | grep -qiE \"sviluppo sostenibile\"; then\n      echo \"$file\"\n    fi\n  done\n' sh {} +",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell/shell_intro.html#based-on-name-filedir-word-in-doc-file",
    "href": "shell/shell_intro.html#based-on-name-filedir-word-in-doc-file",
    "title": "Intro to Unix and shell",
    "section": "… based on name (file|dir) + word (in doc file)",
    "text": "… based on name (file|dir) + word (in doc file)\n\npandoc ./\"Ioratti_proposta_DOCUMENTO PROGRAMMATICO - spunti per l'impostazione.doc\" -t plain # NOPE\n# Unknown input format doc\nantiword ./\"Ioratti_proposta_DOCUMENTO PROGRAMMATICO - spunti per l'impostazione.doc\" | grep -i \"pavia\" # YEP\n\nfind . -type f -name \"*.doc\" -exec sh -c '\n  for file do\n    if antiword \"$file\" 2&gt;/dev/null | grep -qiE \"PAVIA \"; then\n      echo \"$file\"\n    fi\n  done\n' sh {} +",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell/shell_intro.html#do-it-to-bring-shared-stuff-in-others-google-drive-into-my-drive",
    "href": "shell/shell_intro.html#do-it-to-bring-shared-stuff-in-others-google-drive-into-my-drive",
    "title": "Intro to Unix and shell",
    "section": "Do it to bring shared stuff in Others’ google Drive into My Drive",
    "text": "Do it to bring shared stuff in Others’ google Drive into My Drive\n\nGo to Google drive under Shared with me/Condivisi con me\n\nRight click and scroll to [Manage/Organizza]/Add shortcut to Drive/Aggiungi scorciatoia\n\nChoose the location My Drive\n\n\n\n# Path\ncd '/Users/luisamimmi/Library/CloudStorage/GoogleDrive-lmm76@georgetown.edu/Il mio Drive'\nls -ls\n\nWill show also linked folders (like shared with me for which I created a shortcut in my drive)\ntotal 41528\n    0 drwx------@  9 luisamimmi  staff       288 Jan 16 16:37 50_mo_quiz_foto\n    8 -rw-------@  1 luisamimmi  staff       193 Mar 17 20:55 Appunti Lezioni INGLESE Fortu 2023.gdoc\n    0 lrw-------@  1 luisamimmi  staff       159 Mar  2  2024 Biostatistics course by Cocca -&gt; /Users/luisamimmi/Library/CloudStorage/GoogleDrive-lmm76@georgetown.edu/.shortcut-targets-by-id/1G8RzLFV_yz_1QH1LhfMU3Rxex1oATzLq/Biostatistics course by Cocca\n    0 drwxr-xr-x@ 19 luisamimmi  staff       608 Apr  4 10:14 CANTI_SAN_MICHELE",
    "crumbs": [
      "Shell",
      "Intro to Unix and shell"
    ]
  },
  {
    "objectID": "shell.html",
    "href": "shell.html",
    "title": "Shell & CLI scripts",
    "section": "",
    "text": "}(Source: www.freepik.com/)",
    "crumbs": [
      "Shell",
      "Shell & CLI scripts"
    ]
  },
  {
    "objectID": "rstats/00_useful.html",
    "href": "rstats/00_useful.html",
    "title": "Useful things R",
    "section": "",
    "text": "Filter rows in and out with dplyr\n\nMultiple values (same column) in and out\n\n\n%in% c(\"x\", \"y\") for values\n\n!colname for negation\n\n\nlibrary(dplyr)\n\nstarwars &lt;- starwars\n\nf_1 &lt;- starwars %&gt;% \n    filter(homeworld %in% c(\"Naboo\",\"Tatooine\"))  \n\nf_2 &lt;- starwars %&gt;% \n    # ! in front! \n    filter(!homeworld %in% c(\"Naboo\",\"Tatooine\"))\n\nMultiple columns (some values) in and out\n\nf_3 &lt;- starwars %&gt;% \n    filter(species == \"Ewok\" & homeworld %in% c(\"Endor\",\"Tatooine\"))  \n\nf_4 &lt;- starwars %&gt;% \n    # ! in front! \n    filter(!species %in% c(\"Droid\",\"Human\") &  !homeworld %in% c(\"Naboo\",\"Tatooine\"))\n\nKeep/Drop rows that have ALL NA values in all columns\n\n# Filter rows that have only NA values in all columns  \ncols_allNA &lt;- starwars %&gt;%\n  filter(if_all(everything(), is.na))  # 0 \n\n# or drop them \n# Drop rows that have NA values in all columns\ncols_noneNA &lt;- starwars %&gt;%\n  filter(!if_all(everything(), is.na))  # 87 \n\nDrop rows that have ANY NA values in all columns\n\n# Filter rows that have only NA values in all columns  \ncols_anyNA &lt;- starwars %&gt;%\n  filter(!if_any(everything(), is.na))  # 58 \n\nKeep/drop rows that have ALL NA values in some columns\n\n# Filter rows that have only NA values in all columns whose name ....\nspec_col_allNA &lt;- starwars %&gt;%\n filter(if_all(starts_with(\"h\"), is.na))  # 0 \n # filter(!if_all(starts_with(\"h\"), is.na))  # 0",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Useful things R"
    ]
  },
  {
    "objectID": "me.html",
    "href": "me.html",
    "title": "Luisa M. Mimmi",
    "section": "",
    "text": "Hi there!\nI am Luisa, a Policy & Data Analyst,  coffee addict, and  enthusiast.\nSince I am a self-taught programmer, I made this website to collect a bunch of nerdy instructions I keep forgetting.\nWhile this stuff is collected for personal use, I am glad if it can help anyone else ☺️\nYou can learn about me and my work via the links below.\n \n  \n   \n  \n    \n     Github\n  \n  \n    \n     LinkedIn"
  },
  {
    "objectID": "git/git_intro.html",
    "href": "git/git_intro.html",
    "title": "Git introduction",
    "section": "",
    "text": "Caution\n\n\n\n\n\nWeb page construction in progress…",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#setting-up-your-git-configs",
    "href": "git/git_intro.html#setting-up-your-git-configs",
    "title": "Git introduction",
    "section": "Setting up your Git configs",
    "text": "Setting up your Git configs\n— In terminal\n\n# - Terminal\n\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email \"jane@example.com\"\ngit config --global --list\n\n— In R\nThe usethis package offers an alternative approach. You can set your Git user name and email from within R:\n\n## install if needed (do this exactly once):\n## install.packages(\"usethis\")\n\nlibrary(usethis)\n#usethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")\n\nManaging/Verifying git credential stored\n\nWhere do I see it on Github? ? fa(name = \"github\") –&gt; settings –&gt; Developer settings –&gt; Personal Access Tokens\n\n\nWARNING: credentials::git_credential_ask(\"https://github.com\") actually exposes the PAT password\n\n\ncredentials::credential_helper_get()\n      # [1] \"osxkeychain\"\n\n# to see all of them \ncredentials::git_credential_ask(\"https://github.com\")\n      # $protocol\n      # [1] \"https\"\n      # $host\n      # [1] \"github.com\"\n      # $username\n      # [1] \"PersonalAccessToken\"\n      # $password\n      # [1] \"ghp_...52eR\" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n      # attr(,\"class\")\n      # [1] \"git_credential\"\n\n# --- other useful things to check \n#usethis::gh_token_help()\nusethis::git_sitrep()\ngh::gh_whoami()\n# {\n#   \"name\": \"Luisa Mimmi\",\n#   \"login\": \"Lulliter\",\n#   \"html_url\": \"https://github.com/Lulliter\",\n#   \"scopes\": \"gist, repo, user, workflow\",\n#   \"token\": \"ghp_...52eR\"\n# } \n\nWhat are SSH keys?\nSecure Shell Protocol (SSH) is a cryptographic network protocol that allows a single computer to connect with a server over the internet securely. SSH is best used for accessing remote servers.",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#create-an-ssh",
    "href": "git/git_intro.html#create-an-ssh",
    "title": "Git introduction",
    "section": "Create an SSH",
    "text": "Create an SSH\nYou only have to do it once. GitHub’s documentation around how to do this is great. Check out articles on generating a new SSH key and adding a new SSH key to your GitHub account to learn how to do this.",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#check-which-ssh-i-already-have",
    "href": "git/git_intro.html#check-which-ssh-i-already-have",
    "title": "Git introduction",
    "section": "Check which ssh I already have",
    "text": "Check which ssh I already have\n\nI have a github SSH\n\nSSH is more secure protocol and requires a SSH key. The supported SSH public keys for GitHub Enterprise Server are ‘id_rsa.pub’, ‘id_ecdsa.pub’, ‘id_ed25519.pub’. You can check your SSH keys as follows:\n\n# - Terminal\nls -al ~/.ssh\n\n\n# - IN R \n\n# ------ where to see my SSH \nlibrary(credentials)  \n# Found git version 2.41.0\n# Supported HTTPS credential helpers: cache, store\n# Found OpenSSH_9.0p1, LibreSSL 3.3.6\n# Default SSH key: /Users/luisamimmi/.ssh/id_ed25519  #(location of my SSH key)\n\n# ------ KEY \n# credentials::ssh_key_info()",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#on-github-i-create-a-new-repo",
    "href": "git/git_intro.html#on-github-i-create-a-new-repo",
    "title": "Git introduction",
    "section": "1) On Github I create a NEW repo",
    "text": "1) On Github I create a NEW repo\n[…]",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#a-in-terminal-clone-remote-repo-locally",
    "href": "git/git_intro.html#a-in-terminal-clone-remote-repo-locally",
    "title": "Git introduction",
    "section": "2.a) In Terminal clone remote repo locally",
    "text": "2.a) In Terminal clone remote repo locally\ni) position myself in the Folder ABOVE the desired git repo\n\n# - Terminal\n\n#  My `ParentFolder` for github repos...\ncd cd ~/Github/  \n\nii) clone remote repo locally locally\nYou can only push to two types of URL addresses:\n\nAn HTTPS URL like https://github.com/user/repo.git\nAn SSH URL, like git@github.com:user/repo.git\n\nGit associates a remote URL with a name, and your default remote is usually called origin\n\n# - Terminal\n\n# if https (Clone using the web URL.)\ngit clone https://github.com/Lulliter/nerd_help.git\n# if SSH (Use a password-protected SSH key.)\ngit clone git@github.com:Lulliter/nerd_help.git",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#b-with-usethis-clone-remote-repo-locally",
    "href": "git/git_intro.html#b-with-usethis-clone-remote-repo-locally",
    "title": "Git introduction",
    "section": "2.b) With {usethis} clone remote repo locally",
    "text": "2.b) With {usethis} clone remote repo locally\nIn the R console (in any R session)\n\nOKKIO: only need the parent folder name (~/Github/) because the actual folder name will be the repo name !\n\n\nlibrary(usethis)\nusethis::create_from_github(\n    # https or SSH both ok \n    repo_spec = \"git@github.com:Lulliter/ideeperpavia.git\",\n    # destdir specifies the parent directory where the new folder (and local Git repo) will live. \n    destdir = \"~/Github/\"\n)\n\nThis Creates a new local directory in destdir, which is all of these things:\n\na directory or folder on your computer\na Git repository, linked to a remote GitHub repository\nan RStudio Project\n\nOpens a new RStudio instance in the new Project",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#optional---i-copy-there-some-stuff-i-already-had-in-a-different-folder",
    "href": "git/git_intro.html#optional---i-copy-there-some-stuff-i-already-had-in-a-different-folder",
    "title": "Git introduction",
    "section": "3) - OPTIONAL - I copy there some stuff I already had in a different folder",
    "text": "3) - OPTIONAL - I copy there some stuff I already had in a different folder\n\n# - Terminal\n\n# copy other LOCAL --&gt; git LOCAL\ncp -r ~/OtherLocalDrive/nerd_help/   ~/Github/_nerd_help",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#i-make-changes-in-the-local-repo",
    "href": "git/git_intro.html#i-make-changes-in-the-local-repo",
    "title": "Git introduction",
    "section": "4) I make changes in the local repo",
    "text": "4) I make changes in the local repo\nFor example, I actually wanted a quarto website, so I open TERMINAL and do\n\n# - Terminal\n\nquarto create project website mysite",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#check-what-happened",
    "href": "git/git_intro.html#check-what-happened",
    "title": "Git introduction",
    "section": "5) Check what happened…",
    "text": "5) Check what happened…\n\n# - Terminal\n\ncd ~/Github/_nerd_help \ngit remote show origin \ngit status",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#add-local-changes-to-staging-area",
    "href": "git/git_intro.html#add-local-changes-to-staging-area",
    "title": "Git introduction",
    "section": "6) Add local changes to staging area",
    "text": "6) Add local changes to staging area\n\n# - Terminal\n\ngit add -A # everything\ngit add -u # only already tracked stuff",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#commit-desired-changes",
    "href": "git/git_intro.html#commit-desired-changes",
    "title": "Git introduction",
    "section": "7) Commit desired changes",
    "text": "7) Commit desired changes\n\n# - Terminal\n\n# Create Std commit \"message\"....\nmsg=\"rebuilt on `date`\"\nif [ $# -eq 1 ]\n  then msg=\"$1\"\nfi\n# ... Commit Those changes.\ngit commit -m \"$msg\"\n\n# or  \ngit commit -m \"whatever message\"",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#push-source-and-build-repos.",
    "href": "git/git_intro.html#push-source-and-build-repos.",
    "title": "Git introduction",
    "section": "8) Push source and build repos.",
    "text": "8) Push source and build repos.\n\n# - Terminal\n\ngit push origin master",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#ask-about-latest-commit",
    "href": "git/git_intro.html#ask-about-latest-commit",
    "title": "Git introduction",
    "section": "Ask about latest commit",
    "text": "Ask about latest commit\nWHere:\n\n\n--format=%cd %cd stands for “commit date.”\n\n--pretty=%B Customizes the output to show the full commit message body\n\n--format=%cd and the commit message subject %s of the most recent commit.\n\n--pretty is a shorthand for common formatting options\n\n\n# - Terminal\n\n# 1) To find out the date and time of your last Git commit \ngit log -1 --format=%cd # %cd stands for \"commit date.\"\n# 2) To find out the message of your last Git commit \ngit log -1 --pretty=%B # --pretty=%B: Customizes the output to show the full commit message body\n\n#1+2) You can get both the commit date and message in one line using the following command:\ngit log -1 --format=\"%cd %s\"\n# or \ngit log -1 --pretty=\"%cd %s\"",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#see-differences-bw-commits",
    "href": "git/git_intro.html#see-differences-bw-commits",
    "title": "Git introduction",
    "section": "See differences b/w commits",
    "text": "See differences b/w commits\n\n# - Terminal\n\n# diff between 2 latest commits (1 on branch) only in files I care \ngit diff dc87ae c86edffc16 \"*.qmd\"\n\n#(To view diff between next commit (HEAD) and parent commit (SHA 682bc))\ngit diff dc87ae..  \ngit diff dc87ae^..HEAD  '***.qmd' #ORQ\ngit diff dc87ae..HEAD   #OR\n\n# b/w old commit on branch and HEAD \ngit diff 693e61^..HEAD",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#when-you-accidentally-let-git-track-files",
    "href": "git/git_intro.html#when-you-accidentally-let-git-track-files",
    "title": "Git introduction",
    "section": "When you accidentally let git track files",
    "text": "When you accidentally let git track files\nCASE 1) File that is Untracked but it appears in git status\n\n🤟🏻 do this + add file to .gitignore file\n💣💥 don’t do this …..\n\n# - Terminal\n\n# Preview the files but `-n` means it is a dry run\ngit clean -n \n# Remove the file (-f flag stands for \"force\")\ngit clean -f \n\nCASE 2) File that is Tracked by git\nThis command removes files from the staging area (so they won’t be in the next commit), but keeps them in the working directory!!! Useful for configuration files, build artifacts, etc.\n\n# - Terminal\n\n# Remove the file from the staging area\n\n# add .env file to .gitignore\necho \"accident.txt\" &gt;&gt; .gitignore\n# tell Git NOT to track this file (it gets removed from the index, but stays local system)\ngit rm --cached accident.txt\n\n# or whole directory (-r recursive) \ngit rm --cached -r directory/",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#your-branch-is-ahead-of-originmaster-by-x-commits",
    "href": "git/git_intro.html#your-branch-is-ahead-of-originmaster-by-x-commits",
    "title": "Git introduction",
    "section": "Your branch is ahead of ‘origin/master’ by “x” commits",
    "text": "Your branch is ahead of ‘origin/master’ by “x” commits\nE.g. I had this occurring because I wanted to push a heavy PDF download button and git push couldn’t go through.\n\nmake a BACKUP of local!\nGo back before the commit\n\n\n\nBrutal: reset your local master to the state on your remote origin (a.k.a. last pushed updates)\n\n\n\n# - Terminal\n\ngit reset --hard origin/master\n\n\n\n\nConservative option: reset to before last commit saving local changes\n\n\n\n\n--soft = you will remove the last commit from the current branch, but the file changes will stay in your working tree & the changes will stay on your index (so it is enough to commit them)\n\n--mixed = you will still keep the changes in your working tree but not on the index (you have to add and commit again)\n\n--hard = you will lose all uncommited changes and all untracked files in addition to the changes introduced in the last commit\n\n\n\n\n# - Terminal\n\ngit reset --soft HEAD~1   \n\n\n\n\nAnother useful option: similar to soft\n\n\n\n\n--keep It only resets the files which are different between the current HEAD and the given commit. It aborts the reset if one or more of these files has uncommited changes. It basically acts as a safer version of hard.\n\n\n\n\n# - Terminal\n\n# Assuming HEAD points at 7e05a95 \n  # 7e05a95  (HEAD -&gt; main) Update a\n  # e62add5  Update b\n  # ca9ae0a  Update a\ngit reset --mixed HEAD^",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#which-branches-have-been-merged",
    "href": "git/git_intro.html#which-branches-have-been-merged",
    "title": "Git introduction",
    "section": "Which branches have been merged?",
    "text": "Which branches have been merged?\n\n# To see which branches have been merged into your current branch\ngit branch --merged\n# To check if a branch has been merged into the remote default branch (e.g., origin/master): \ngit branch -r --merged origin/master \n\n# To check a specific branch was merged \ngit log master --oneline --decorate --graph --all | grep new_sh",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#visual-confirmation-of-branches",
    "href": "git/git_intro.html#visual-confirmation-of-branches",
    "title": "Git introduction",
    "section": "Visual confirmation of branches",
    "text": "Visual confirmation of branches\nThis shows a visual representation of branch merges.\n\ngit log --graph --oneline --all\n# for a specific branches\ngit merge-base --is-ancestor new_sh master \n  # success == no output, exit code 0\ngit merge-base --is-ancestor wkg_branch master   \n  # failure\ngit merge-base --is-ancestor page_col master   \n  # success == no output, exit code 0",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_intro.html#delete-local-and-remote-branch-e.g.-new_sh",
    "href": "git/git_intro.html#delete-local-and-remote-branch-e.g.-new_sh",
    "title": "Git introduction",
    "section": "Delete local and remote branch (e.g. new_sh)",
    "text": "Delete local and remote branch (e.g. new_sh)\n(now not visible anumore)\n\n# check merged \ngit merge-base --is-ancestor new_sh master \n# delete local \ngit branch -D new_sh\n# delete remote \ngit push origin --delete new_sh\n# re-check \ngit branch -a\n\n## WTF remotes/upstream/new_sh ?\ngit remote -v\n# remote also from remote upstream \ngit push upstream --delete new_sh # ---&gt;&gt;&gt;&gt; NOPE (but it was stale in local ref!\ngit remote prune upstream           # ---&gt;&gt;&gt;&gt; YEP !!\n\n# verify deletion \ngit branch -r",
    "crumbs": [
      "git",
      "Git introduction"
    ]
  },
  {
    "objectID": "git/git_branches.html",
    "href": "git/git_branches.html",
    "title": "Git branches",
    "section": "",
    "text": "Caution\n\n\n\n\n\nWeb page construction in progress…",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#create-checkout-a-branch",
    "href": "git/git_branches.html#create-checkout-a-branch",
    "title": "Git branches",
    "section": "Create & checkout a branch",
    "text": "Create & checkout a branch\n\n“checkout” means to change the branch you are currently working on (or switch to)\n\n\n# 1/2 create b\ngit branch page_col #create a new branch named \"page_col\"\n\n# 2/2 then switch to b\ngit checkout page_col\n\n# or 1+2/2 CREATE + SWITCH BRANCHES\ngit checkout -b page_col",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#rename-a-local-branch",
    "href": "git/git_branches.html#rename-a-local-branch",
    "title": "Git branches",
    "section": "Rename a (local) branch",
    "text": "Rename a (local) branch\nIt’s the -m parameter !\n\nyou cannot rename a remote branch –&gt; you delete it and re-upload it\n\n\n# In currently checkedout \ngit branch -m better_name\n\n# In different branch (non HEAD)\ngit switch master\ngit branch test_branch # fake one \ngit branch -a  # it's there\ngit branch -m test_branch test_branch2",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#rename-a-local-branch-1",
    "href": "git/git_branches.html#rename-a-local-branch-1",
    "title": "Git branches",
    "section": "Rename a (local) branch",
    "text": "Rename a (local) branch\nIt’s the -m parameter !\n\nyou cannot rename a remote branch –&gt; you delete it and re-upload it\n\n\n# In currently checkedout \ngit branch -m better_name\n\n# In different branch (non HEAD)\ngit switch master\ngit branch test_branch # fake one \ngit branch -a  # it's there\ngit branch -m test_branch test_branch2",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#see-which-branches-there-are",
    "href": "git/git_branches.html#see-which-branches-there-are",
    "title": "Git branches",
    "section": "See which branches there are",
    "text": "See which branches there are\n\n# (check which branches)\ngit branch   # to list local branches.\ngit branch -r # to list remote branches.\ngit branch -a # to list all branches (local + remote).\ngit branch --merged # to list branches that have been merged into the current branch.\n\nDelete a branch (up)\nThis is only local, no remote. This is only local, no remote.\n\n# delete local \ngit branch -d up\n\n# (delete remote)\n\n# (delete remote)\ngit push origin --delete up # error: unable to delete 'up': remote ref does not exist",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#switch-to-other-branch",
    "href": "git/git_branches.html#switch-to-other-branch",
    "title": "Git branches",
    "section": "0. Switch to other branch",
    "text": "0. Switch to other branch\n\nIt is better to commit or stash your changes before switching branches!!!\n\nYou can also use git switch other_branch which is more specific\n\ngit switch wkg_branch\ncat .git/HEAD # (confirms me I moved)\n\nHowever I might have ALSO new/uncommitted stuff in the wkg_branch",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#evaluate-changes",
    "href": "git/git_branches.html#evaluate-changes",
    "title": "Git branches",
    "section": "1. Evaluate changes",
    "text": "1. Evaluate changes\nReview these changes to ensure you understand what will be merged.\n\n# check commits in wkg_branch\ngit log -2 --graph master..wkg_branch\n  #  2 commits...  \n    # qlc su wkg_branch\n    # pasticci su wkg_branch\n\n# check commits in master\ngit log -2 --graph wkg_branch..master\n  # 2 commits \n    # split git_branch + git_collab ⑂\n    # removed branch new_sh",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#commit-changes-left-on-wkg_branch",
    "href": "git/git_branches.html#commit-changes-left-on-wkg_branch",
    "title": "Git branches",
    "section": "2. Commit changes left on wkg_branch\n",
    "text": "2. Commit changes left on wkg_branch\n\ngit indicates the two versions of the file with &lt;&lt;&lt;&lt;&lt; and &gt;&gt;&gt;&gt;&gt; markers.\n\n\nFigure 1: Git merge conflict\n\n\n\n\n\nHere there are 3 options:\n\nAbort merge\nResolve conflicts manually\nUse a merge tool\n\n2.1. Abort the merge\n\ngit merge --abort\n\nThis will revert the working directory to the state before the merge attempt.\n2.2. Resolve conflicts manually\nDeal with CONFLICTING FILES\nDifferent ways to resolve conflicts:\n\nCommit local changes\n\n\n# (in wkg_branch)\ngit add .\ngit commit -m \"Save local changes\"\n\n# then  merge master into wkg_branch\n\n# then  merge master into wkg_branch\ngit merge master\n\n\nStash the changes\n\n\n# (in wkg_branch)\ngit stash\n\n# then merge master into wkg_branch\n\n# then merge master into wkg_branch\ngit merge master\n# Bring your changes back\n# Bring your changes back\ngit stash pop\n\n\nDiscard the local changes\n\n\n# (in wkg_branch)\ngit checkout -- .\ngit checkout -- docs/git/git_branches.html docs/search.json docs/sitemap.xml\n\n# then merge master into wkg_branch\n\n# then merge master into wkg_branch\ngit merge master\n\nDeal with UNTRACKED FILES in wkg_branch\n\nthese too could get overwritten by the merge, so I have to stash or move/delete them\n\n#(this includes new files you haven't added yet)\ngit stash push --include-untracked\n# then merge master into wkg_branch\ngit merge master\n# Bring your changes back\ngit stash pop\n\n2.3. Resolve conflicts with a merge tool\n(like the one in VS CODE)\nYou can use a merge tool to resolve the conflicts, such as git mergetool or git difftool.\n\nThe best way for SOURCE CODE FILES is to go on VS CODE and use the guided merge prompt to manually choose the version to keep.\nThe best way for RENDERED FILES (i.e. docs/* files) is to delete the file and re-render it.\n\n\n# --theirs means \"restore files as in the branch you are merging in,\" (master) \ngit checkout --theirs -- docs/index.html\n\n# then \ngit add docs/index.html\ngit commit",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#then-add-commit-to-confirm-the-merge",
    "href": "git/git_branches.html#then-add-commit-to-confirm-the-merge",
    "title": "Git branches",
    "section": "3. Then add + commit to confirm the merge",
    "text": "3. Then add + commit to confirm the merge\ngit add marks the conflicts as resolved, and git commit concludes the merge process.\n\n# upon detecting and resolving conflicts...\n\ngit add . # stages all resolved files at once\ngit commit # Git will automatically open a merge commit message like: Merge branch 'master' into wkg_branch",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#push-the-updated-branch",
    "href": "git/git_branches.html#push-the-updated-branch",
    "title": "Git branches",
    "section": "4. Push the Updated Branch",
    "text": "4. Push the Updated Branch\n\n# check status\ngit log --graph --all --oneline --decorate\ngit log --graph -5 --oneline --decorate",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "git/git_branches.html#push-upstream-a-local-branch",
    "href": "git/git_branches.html#push-upstream-a-local-branch",
    "title": "Git branches",
    "section": "🟠 Push upstream a local branch",
    "text": "🟠 Push upstream a local branch\n(kind of too complicated for me)\n\nIt is important to Setup an Upstream Branch in Git to make the workflow smooth and manage branches efficiently.\n\n\nAn upstream branch in Git refers to a branch that serves as a reference point for another branch. Typically, it’s used to track the remote branch, allowing developers to fetch updates, compare changes, and push their commits easily. Setting an upstream branch simplifies the process of keeping local and remote repositories in sync.\n\n\nCreate local branch\nSwitch to local branch git checkout -b &lt;new_branch&gt;\n\n[When the current branch i.e (‘new_branch’) has no Upstream branch set] git push –-set-upstream origin &lt;new_branch&gt; command (the 1st time you push)\nThereafter git push -u origin &lt;new_branch&gt; (all subsequent git push commands automatically move local branch changes up to the remote branch.)",
    "crumbs": [
      "git",
      "Git branches"
    ]
  },
  {
    "objectID": "dev/05_colors.html",
    "href": "dev/05_colors.html",
    "title": "Colors",
    "section": "",
    "text": "Caution\n\n\n\n\n\nWeb page construction in progress…",
    "crumbs": [
      "Dev tools",
      "Colors"
    ]
  },
  {
    "objectID": "dev/05_colors.html#colors",
    "href": "dev/05_colors.html#colors",
    "title": "Colors",
    "section": "Colors",
    "text": "Colors\n\npacificharbour_shades &lt;- c( \"#d4e6f3\",\"#b8d6eb\", \"#9cc6e3\", \"#80b6db\",  \"#72aed8\", \"#5b8bac\", \"#39576c\",  \"#16222b\")\n\npacificharbour  &lt;- \"#72aed8\"\njapyew &lt;- \"#d89c72\"\ntriad_verde &lt;- \"#d8cf71\"\ntriad_rosso &lt;- \"#d8717b\"\n\nbluMEFprinc &lt;- \"#2D337C\" # \"#2D337CFF\" (alpha = 1) OR rgb(45/255, 51/255, 124/255, 1)\nbluMEFsec &lt;- \"#455A8B\" # \"#455A8BFF\" (alpha = 1) OR rgb(69/255, 90/255, 139/255, 1)\nbluMEFsec_light &lt;- \"#455A8B99\"\nbluMEFsec_extralight &lt;- \"#455A8B33\" #  (alpha = .2) OR rgb(69/255, 90/255, 139/255, .2)\n\ngialloMEF_dark &lt;- \"#715115\"\ngialloMEFprinc &lt;- \"#BD8723\" # \"#BD8723FF\" (alpha = 1) OR rgb(189/255, 135/255, 35/255, 1)\ngialloMEF_light &lt;- \"#d7b77b\" # \"#BD8723FF\" (alpha = 1) OR rgb(189/255, 135/255, 35/255, 0.4)\ngialloMEF_extralight &lt;- \"#f1e7d3\" # \"#BD8723FF\" (alpha = 1) OR rgb(189/255, 135/255, 35/255, 0.2)\n\nbordeaux_dark &lt;- \"#51242c\" # \"#854442FF\" (alpha = 1) OR rgb(133/255, 68/255, 66/255, 1)\nbordeaux &lt;- \"#873c4a\" # \"#854442FF\" (alpha = 1) OR rgb(133/255, 68/255, 66/255, 1)\nbordeaux_light &lt;- \"#b78a92\" #\"#85444299\"\nbordeaux_extralight &lt;- \"#e7d8da\" #\" \"#e6cdcc\"\n\nviola &lt;- \"#2D337C\"\nviola_light &lt;- \"#8e94d6\" #\"#85444299\"\nviola_extralight &lt;- \"#d9dbf1\" #\" \"#e6cdcc\"\n\nverde_dark &lt;- \"#245048\"\nverde &lt;- \"#3c8678\" # \"#285E60FF\" (alpha = 1) OR rgb(40/255, 94/255, 96/255, 1)\nverde_light &lt;- \"#8ab6ae\" # \"#285E60FF\" (alpha = 1) OR rgb(40/255, 94/255, 96/255, 1)\nverde_extralight &lt;- \"#d8e6e4\"\nverdino &lt;- \"#a6bd23\"\n\nmarrone_dark  &lt;- \"#5d2b15\"\nmarrone &lt;- \"#9b4923\" # \"#866445FF\" (alpha = 1) OR rgb(134/255, 100/255, 69/255, 1)\nmarrone_light &lt;- \"#c3917b\"\nmarrone_extralight &lt;- \"#ebdad3\"\n\ngrigio_scuro &lt;- \"#4c4c4c\" # \"#A6A6A6FF\" (alpha = 1) OR rgb(166/255, 166/255, 166/255, 1)\ngrigio &lt;- \"#A6A6A6\"\ngrigioSfondo &lt;- \"#F2F2F2\" # \"#F2F2F2FF\" (alpha = 1) OR rgb(242/255, 242/255, 242/255, 1)\n\n\narancio_dark  &lt;- \"#8e550a\"\narancio &lt;- \"#bd710e\" # \"#866445FF\" (alpha = 1) OR rgb(134/255, 100/255, 69/255, 1)\narancio_light &lt;- \"#f0a441\"\narancio_extralight &lt;- \"#fbe8cf\"\n\nrosso &lt;- \"#9b2339\"\n# col2rgb( \"#854442\")",
    "crumbs": [
      "Dev tools",
      "Colors"
    ]
  },
  {
    "objectID": "dev/05_colors.html#color-palettes",
    "href": "dev/05_colors.html#color-palettes",
    "title": "Colors",
    "section": "Color palettes",
    "text": "Color palettes\n\n#palette_g20 &lt;- c(\"#455A8B\", \"#854442\", \"#285E60\", \"#BD8723\", \"#866445\", \"#A6A6A6\")\n#mycolors_gradient &lt;- c(\"#ccf6fa\", \"#80e8f3\", \"#33d9eb\", \"#00d0e6\", \"#0092a1\")\n\n#                   fat gold  |Romaine Green| Blue ColaD |directoire Blue| Bourgeois  | Aztec Turquoise | Fulvous\nmycolors_contrast &lt;- c(\"#9b2339\", \"#E7B800\",\"#239b85\", \"#85239b\", \"#9b8523\",\"#23399b\", \"#d8e600\", \"#0084e6\",\"#399B23\",  \"#e60066\" , \"#00d8e6\",  \"#005ca1\", \"#e68000\")\n#theme_col &lt;-  c(\"#00d7e6\", \"#0065e6\",  \"#10069f\")  \nthree_col &lt;- c(\"#d8e600\", \"#e68000\",  \"#e60c00\")     \ntwo_col &lt;- c( \"#009E73\",\"#E69F00\")\n\ntwo_col_contrast &lt;- c( \"#399B23\",  \"#e60066\" )\n\n\nblu_contrast &lt;- c(\n  \"#0f7184\",\n  \"#56adbf\",\n  \"#5bd6ef\",\n  \"#025b6d\",\n  \"#b5f2ff\",\n  \"#1b5884\",\n  \"#72aed8\",\n  \"#98c8ea\",\n  \"#5097c9\",\n  \"#3a7aa8\",\n  \"#0286e5\",\n  \"#c6e7ff\",\n  \"#013d68\"\n  )\n\n\n# # -- Add custom fonts & make custom theme for ggplot2 -----\n# # -- da google\nsysfonts::font_add_google(name = \"Roboto Condensed\", family =  \"Condensed\")\nsysfonts::font_add(family = \"Roboto Condensed\", regular =  \"~/Applications/Roboto_Condensed/RobotoCondensed#-Regular.ttf\")\n# # -- da web\nsysfonts::font_add(family = \"Inconsolata\", regular = \"~/Applications/Inconsolata/static/Inconsolata_Expanded#.ttf\")\nsysfonts::font_families()\n# \n# # install.packages(\"extrafont\")\nlibrary(extrafont)\n# # -- quali ho nel sistema\nfonts()\n# # -- Import all the .ttf files from your system",
    "crumbs": [
      "Dev tools",
      "Colors"
    ]
  },
  {
    "objectID": "dev/03b_Google_domain.html",
    "href": "dev/03b_Google_domain.html",
    "title": "Custom domain on Google domain",
    "section": "",
    "text": "The following steps help when setting up a new website that is hosted on GitHub Pages. Then, since GitHub Pages supports using custom domains, there are the instructions to re-direct tje site’s URL from the default &lt;user&gt;.github.io/domain to a custom domain name registered on Google Domain. Since GitHub Pages supports using custom domains, there are the instructions to re-direct the site’s URL from the default &lt;user&gt;.github.io/domain to a custom domain name registered on Google Domain.\nAssuming you have:",
    "crumbs": [
      "Dev tools",
      "Custom domain on Google domain"
    ]
  },
  {
    "objectID": "dev/03b_Google_domain.html#on-github-initiate-a-repo-in-the-usual-way",
    "href": "dev/03b_Google_domain.html#on-github-initiate-a-repo-in-the-usual-way",
    "title": "Custom domain on Google domain",
    "section": "[on GitHub]: initiate a repo in the usual way",
    "text": "[on GitHub]: initiate a repo in the usual way\n\nCreate a new repo on GitHub\nGo on local PARENT directory of the intended repo\nExecute\n\n\ngit clone https://github.com/Lulliter/example.git\n\n\n\non Local/GitHub: deploy website via Github Pages\n\nadd content\ngit add/commit/push (or see my ./_render-deploy.sh)\n\n\nConfigure the Repo to publish on https://lulliter.github.io/example/ by going to Settings –&gt; Pages –&gt; (make sure to have a ./docs folder and indicate to GH that you will deploy from it)\non local: CNAME Looking forward, we will need to have a file named CNAME that contains a single row: your custom domain (in this case: thepadrinoz.com)\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\n❗ Before adding/committing to repo CNAME, at every push, the custom domain gets decoupled from GH Pages settings ….",
    "crumbs": [
      "Dev tools",
      "Custom domain on Google domain"
    ]
  },
  {
    "objectID": "dev/03b_Google_domain.html#on-google-domain-buy-a-domain",
    "href": "dev/03b_Google_domain.html#on-google-domain-buy-a-domain",
    "title": "Custom domain on Google domain",
    "section": "[on Google Domain] Buy a domain",
    "text": "[on Google Domain] Buy a domain",
    "crumbs": [
      "Dev tools",
      "Custom domain on Google domain"
    ]
  },
  {
    "objectID": "dev/03b_Google_domain.html#on-google-domain-set-up-a-hosted-zone",
    "href": "dev/03b_Google_domain.html#on-google-domain-set-up-a-hosted-zone",
    "title": "Custom domain on Google domain",
    "section": "[on Google Domain] set up a “HOSTED ZONE”",
    "text": "[on Google Domain] set up a “HOSTED ZONE”",
    "crumbs": [
      "Dev tools",
      "Custom domain on Google domain"
    ]
  },
  {
    "objectID": "dev/02_quarto.html",
    "href": "dev/02_quarto.html",
    "title": "Quarto projects and websites",
    "section": "",
    "text": "Caution\n\n\n\n\n\nWebsite construction in progress…",
    "crumbs": [
      "Dev tools",
      "Quarto projects and websites"
    ]
  },
  {
    "objectID": "dev/02_quarto.html#markdown-divs",
    "href": "dev/02_quarto.html#markdown-divs",
    "title": "Quarto projects and websites",
    "section": "Markdown divs\n",
    "text": "Markdown divs\n\nRather than write out the HTML, you can use “fenced Div blocks”, which somewhat resemble code chunks. These Div blocks use the following syntax, where # denotes the ID, and . denotes a class.\nExample:\n\nthis (markdown) is =\n\n::: {#hello .greeting .message style=\"color: red;\"}\nHello **world**!\n:::\n\nHello world!\n\n\nto this (HTLM)\n\n&lt;div id=\"hello\" class=\"greeting\"&gt;\n  Hello world!\n&lt;/div&gt;\n\nand this (markdown) is =\n\n::: {style=\"color: red; border: solid black;\"}\nGoodbye, world.\n:::\n\nGoodbye, world.\n\n\nand to this (HTLM)\n\n&lt;div style=\"color: red; border: solid black;\"&gt;\n  Goodbye, world.\n&lt;/div&gt;",
    "crumbs": [
      "Dev tools",
      "Quarto projects and websites"
    ]
  },
  {
    "objectID": "dev/02_quarto.html#quarto-and-bibliography",
    "href": "dev/02_quarto.html#quarto-and-bibliography",
    "title": "Quarto projects and websites",
    "section": "Quarto and bibliography",
    "text": "Quarto and bibliography\nCheck out these resources:\n\nAnnotated Bibliographies with Quarto\nEnough Markdown to Write a Thesis\nCitations in R Markdown",
    "crumbs": [
      "Dev tools",
      "Quarto projects and websites"
    ]
  },
  {
    "objectID": "dev.html",
    "href": "dev.html",
    "title": "Misc. Development tools",
    "section": "",
    "text": "(Source: www.freepik.com/)",
    "crumbs": [
      "Dev tools",
      "Misc. Development tools"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html",
    "href": "dev/03a_AWS.html",
    "title": "Custom domain on AWS",
    "section": "",
    "text": "The following steps help when setting up a new website that is hosted on GitHub Pages. Then, since GitHub Pages supports using custom domains, there are the instructions to re-direct tje site’s URL from the default &lt;user&gt;.github.io/domain to a custom domain name registered on AWS. Since GitHub Pages supports using custom domains, there are the instructions to re-direct the site’s URL from the default &lt;user&gt;.github.io/domain to a custom domain name registered on AWS.\nAssuming you have:",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-github-initiate-a-repo-in-the-usual-way",
    "href": "dev/03a_AWS.html#on-github-initiate-a-repo-in-the-usual-way",
    "title": "Custom domain on AWS",
    "section": "[on GitHub]: initiate a repo in the usual way",
    "text": "[on GitHub]: initiate a repo in the usual way\n\nCreate a new repo on GitHub\nGo on local PARENT directory of the intended repo\nExecute\n\n\ngit clone https://github.com/Lulliter/example.git\n\n\non Local/GitHub: deploy website via Github Pages\n\nadd content\ngit add/commit/push (or see my ./_render-deploy.sh)\n\n\nConfigure the Repo to publish on https://lulliter.github.io/example/ by going to Settings –&gt; Pages –&gt;\n\n\nmake sure to have a ./docs folder and indicate to GH that you will deploy from it\nand to create a .nojekyll file for GitHub pages to work with a quarto website!\n\n\non local: CNAME Looking forward, we will need to have a file named CNAME that contains a single row: your custom domain (in this case: thepadrinoz.com)\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\n❗ Before adding/committing to repo CNAME, at every push, the custom domain gets decoupled from GH Pages settings ….",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-aws-buy-a-domain",
    "href": "dev/03a_AWS.html#on-aws-buy-a-domain",
    "title": "Custom domain on AWS",
    "section": "[on AWS] Buy a domain",
    "text": "[on AWS] Buy a domain\n\non AWS: Go to Route53, under ‘register domain’ then follow instructions to buy a domain (usually 10$/12$ per year). e.g. example.com\n\non AWS Route53: domain registration should be done automatically\n\nfirst, it will appear under DOMAINS –&gt; Pending Requests [a verification email will be sent by AWS]\nafter it will be under DOMAINS –&gt; Registered Domains\n\n\n\nI had already bought some DOMAIN from Amazon… + lulliter.com + R4biostats.com",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-aws-set-up-a-hosted-zone",
    "href": "dev/03a_AWS.html#on-aws-set-up-a-hosted-zone",
    "title": "Custom domain on AWS",
    "section": "[on AWS] set up a “HOSTED ZONE”",
    "text": "[on AWS] set up a “HOSTED ZONE”\nI see “HostedZone created by Route53 Registrar”\nNOTE: If AWS did not automatically create a hosted zone upon buying the domain name, create one.\n\n\n\n\n\n\nTip\n\n\n\n\n\nSo for example if you bought the domain name username.com, you create the hosted zone name username.com. Once created open it up. Once you have created the hosted zone, open it up, click the Type NS, and copy the values on the right (4x url’s to awsdns addresses). Then go to the registered domains from the left menu, and in the Name Servers section on the right, click Add or edit name servers, delete any contents in there, and add the 4x lines you just copied one by one. This gives your domain name the address to the hosted zone.",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-aws-redirect-the-domain-to-my-website-on-github-pages",
    "href": "dev/03a_AWS.html#on-aws-redirect-the-domain-to-my-website-on-github-pages",
    "title": "Custom domain on AWS",
    "section": "[on AWS]: Redirect the domain to my website on Github pages",
    "text": "[on AWS]: Redirect the domain to my website on Github pages\n\n\n\n\n\n\nNote\n\n\n\n\n\nFollowing\n\n\nBEn Wiz’s tutorial and + GITHUB ’s tutorial\n\n\n\n\n\n\nLog into AWS Console –&gt; Route53\nIn your Route53 dashboard, click hosted zones \n\nClick on the hyperlinked name of the domain you would like to use so it can open its specific page. Without doing nothing I already see:\n\n\nexample.com — Type NS — …\n\nexample.com — Type SOA — …\n\n\n\n\n\n\nClick Create Record A (This will be your example.com rule)\n\nDo not enter anything into the Name field\nUnder the Type dropdown, select A — IPv4 addresses\nThe Alias toggle should be UNSELECTED\nEnter the following four IP addresses into the value text area.\n\n\n\n    185.199.108.153\n   185.199.109.153\n   185.199.110.153\n   185.199.111.153\n\nThen click Save Record Set “Create Record” .",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-aws-configuring-a-subdomain-www.example.com",
    "href": "dev/03a_AWS.html#on-aws-configuring-a-subdomain-www.example.com",
    "title": "Custom domain on AWS",
    "section": "[on AWS]: Configuring a subdomain www.example.com\n",
    "text": "[on AWS]: Configuring a subdomain www.example.com\n\n\n\nCreate another A type of record set (your www.example.com rule, aka an alias for example.com)\n\nInto the Name field, enter ‘www’\n\nUnder the Type dropdown, select A — IPv4 addresses, again\nSELECT Alias on the dashboard, from dropdown menu, choose “Alias to another record in this hosted zone” and then www.example.com. (it has the full stop!!)\nThen click Save Record Set Create Record .\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn GH Pages, when you write under \"Custom domain\" the new name of your vanity example.com domain something will happen. If you are publishing your site from a branch (e.g. master branch / ./docs), this will create a commit that adds a CNAME file directly to the root of your source branch.\n💡 SO next time you push from local it will tell that your branch is ahead or something an you must do some form of git pull\n\n# praticamente pull da remoto + insieme merge ai cambiamenti locali \ngit config pull.rebase false\n\n\n\n\n\n\nLast, go back to GitHub repository’s settings tab\n\nScroll down to the GitHub Pages section\nIn the Custom domain field enter your custom domain: example.com\n\nClick Save\nCheck Enforce HTTPS",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-local-adjust-the-.yml-file-of-your-website",
    "href": "dev/03a_AWS.html#on-local-adjust-the-.yml-file-of-your-website",
    "title": "Custom domain on AWS",
    "section": "[on local]: Adjust the .yml file of your website",
    "text": "[on local]: Adjust the .yml file of your website\nLastest 😥, go to “_site.yml” and replace base_url\n\n##  e.g.  in quarto.yml \n\nwebsite:\n  title: \"The example KOOL stuff\"\n  site-url: https://example.com",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/03a_AWS.html#on-gh-pages-fix-ghpages-error",
    "href": "dev/03a_AWS.html#on-gh-pages-fix-ghpages-error",
    "title": "Custom domain on AWS",
    "section": "[on GH Pages]: fix GHPages error",
    "text": "[on GH Pages]: fix GHPages error\nGH Pages is asking me to point www.domain.com to a CNAME record (instead of an A record)",
    "crumbs": [
      "Dev tools",
      "Custom domain on AWS"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html",
    "href": "dev/04_AWS_mail.html",
    "title": "Aruba <-> GH Pages",
    "section": "",
    "text": "Caution\n\n\n\n\n\nWebsite construction in progress…",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#step-1-deploy-your-website-via-github-pages",
    "href": "dev/04_AWS_mail.html#step-1-deploy-your-website-via-github-pages",
    "title": "Aruba <-> GH Pages",
    "section": "✅ Step 1: Deploy your website via GitHub Pages",
    "text": "✅ Step 1: Deploy your website via GitHub Pages\nMake sure your site is published via GitHub Pages.\n\n\nUser site: https://yourusername.github.io/\n\n\nProject site: https://yourusername.github.io/project-name/\n\n\nSet your custom domain in the repo settings or by adding a CNAME file to the root of your repository with the content:\nyourdomain.com",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#step-2-get-your-domain-from-aruba",
    "href": "dev/04_AWS_mail.html#step-2-get-your-domain-from-aruba",
    "title": "Aruba <-> GH Pages",
    "section": "✅ Step 2: Get your domain from Aruba",
    "text": "✅ Step 2: Get your domain from Aruba\nIf you haven’t already, purchase or manage your domain on https://admin.aruba.it.",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#step-3-update-dns-settings-on-aruba",
    "href": "dev/04_AWS_mail.html#step-3-update-dns-settings-on-aruba",
    "title": "Aruba <-> GH Pages",
    "section": "✅ Step 3: Update DNS Settings on Aruba",
    "text": "✅ Step 3: Update DNS Settings on Aruba\n\nLog in to Aruba’s admin panel.\nGo to:\n\nDomini → [yourdomain.com] → Gestione DNS e Name Server → Modifica zona DNS\n\nAdd the following A records to point to GitHub Pages:\n\n\n\nType\nName\nValue\n\n\n\nA\n@\n185.199.108.153\n\n\nA\n@\n185.199.109.153\n\n\nA\n@\n185.199.110.153\n\n\nA\n@\n185.199.111.153\n\n\n\n\nAdd a CNAME record so www.yourdomain.com redirects correctly:\n\n\n\nType\nName\nValue\n\n\nCNAME\nwww\nyourusername.github.io.\n\n\n\n⚠️ Don’t forget the trailing . after your GitHub username.",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#step-4-configure-your-github-repository",
    "href": "dev/04_AWS_mail.html#step-4-configure-your-github-repository",
    "title": "Aruba <-> GH Pages",
    "section": "✅ Step 4: Configure your GitHub Repository",
    "text": "✅ Step 4: Configure your GitHub Repository\n\nGo to your repository → Settings → Pages.\nIn the Custom domain field, enter:\n\nyourdomain.com\n\nGitHub will create a CNAME file automatically.\n\nEnable “Enforce HTTPS” after DNS has propagated.",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#wait-for-dns-propagation",
    "href": "dev/04_AWS_mail.html#wait-for-dns-propagation",
    "title": "Aruba <-> GH Pages",
    "section": "⏱️ Wait for DNS Propagation",
    "text": "⏱️ Wait for DNS Propagation\n\nThis can take a few hours (up to 48h).\nUse tools like https://dnschecker.org to check your domain.\nFrom your terminal:\n\n\nping yourdomain.com",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#test",
    "href": "dev/04_AWS_mail.html#test",
    "title": "Aruba <-> GH Pages",
    "section": "🧪 Test",
    "text": "🧪 Test\nOnce propagated:\n\nVisit https://yourdomain.com\n\nAlso test https://www.yourdomain.com to ensure CNAME redirection works.",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "dev/04_AWS_mail.html#optional-redirect-www-to-apex-domain",
    "href": "dev/04_AWS_mail.html#optional-redirect-www-to-apex-domain",
    "title": "Aruba <-> GH Pages",
    "section": "🔁 Optional: Redirect www to apex domain",
    "text": "🔁 Optional: Redirect www to apex domain\nYou can set up a redirect in GitHub Pages or via a simple HTML file in a separate repo like www.yourdomain.com that forwards to yourdomain.com.\nLet me know if you’d like a template for that too!",
    "crumbs": [
      "Dev tools",
      "Aruba <-> GH Pages"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "Git",
    "section": "",
    "text": "(Source: www.freepik.com/)",
    "crumbs": [
      "git",
      "Git"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html",
    "href": "git/git_feature_workflow.html",
    "title": "Git Feature Branch Workflow",
    "section": "",
    "text": "This workflow supports small-team collaboration using feature branches and GitHub pull requests. Based on:\n\nA simple Git workflow for small team projects\nGIT when working with a team?\nGit Feature Branch Workflow",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#intro",
    "href": "git/git_feature_workflow.html#intro",
    "title": "Git Feature Branch Workflow",
    "section": "",
    "text": "This workflow supports small-team collaboration using feature branches and GitHub pull requests. Based on:\n\nA simple Git workflow for small team projects\nGIT when working with a team?\nGit Feature Branch Workflow",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-0-clean-your-master-worktree",
    "href": "git/git_feature_workflow.html#step-0-clean-your-master-worktree",
    "title": "Git Feature Branch Workflow",
    "section": "Step 0: Clean your master worktree",
    "text": "Step 0: Clean your master worktree\nMake sure there are no uncommitted or unpushed changes in master.\ngit status\n# should output: nothing to commit, working tree clean",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-1-switch-to-master-and-update-it-from-origin",
    "href": "git/git_feature_workflow.html#step-1-switch-to-master-and-update-it-from-origin",
    "title": "Git Feature Branch Workflow",
    "section": "Step 1: Switch to master and update it from origin",
    "text": "Step 1: Switch to master and update it from origin\ngit checkout master\ngit pull origin master",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-2-create-a-new-feature-branch",
    "href": "git/git_feature_workflow.html#step-2-create-a-new-feature-branch",
    "title": "Git Feature Branch Workflow",
    "section": "Step 2: Create a new feature branch",
    "text": "Step 2: Create a new feature branch\nCreate a new branch based on the latest master.\ngit checkout -b feature/name\n(OR IF EXISTING) Switch to an existing feature branch:\ngit switch feature/name",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#make-your-changes",
    "href": "git/git_feature_workflow.html#make-your-changes",
    "title": "Git Feature Branch Workflow",
    "section": "(Make your changes)…",
    "text": "(Make your changes)…",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-3-edit-and-commit-changes",
    "href": "git/git_feature_workflow.html#step-3-edit-and-commit-changes",
    "title": "Git Feature Branch Workflow",
    "section": "Step 3: Edit and commit changes",
    "text": "Step 3: Edit and commit changes\nStage and commit your changes regularly.\ngit add .\ngit commit -m \"feat: update on x\"",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-4-optional-check-differences-from-master",
    "href": "git/git_feature_workflow.html#step-4-optional-check-differences-from-master",
    "title": "Git Feature Branch Workflow",
    "section": "Step 4 (optional): Check differences from master\n",
    "text": "Step 4 (optional): Check differences from master\n\nUseful for reviewing what the branch introduces.\ngit diff --color-words master..feature/name",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-5-push-your-branch-to-the-remote",
    "href": "git/git_feature_workflow.html#step-5-push-your-branch-to-the-remote",
    "title": "Git Feature Branch Workflow",
    "section": "Step 5: Push your branch to the remote",
    "text": "Step 5: Push your branch to the remote\nPush your branch and set the upstream tracking reference.\ngit push -u origin feature/name",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-6-optional-update-local-master",
    "href": "git/git_feature_workflow.html#step-6-optional-update-local-master",
    "title": "Git Feature Branch Workflow",
    "section": "Step 6 (optional): Update local master\n",
    "text": "Step 6 (optional): Update local master\n\nSwitch back to master to check if there have been any updates.\ngit checkout master\n# (optional) update local repo with latest changes from remote\ngit pull origin master",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-7-optional-merge-latest-master-into-your-feature-branch",
    "href": "git/git_feature_workflow.html#step-7-optional-merge-latest-master-into-your-feature-branch",
    "title": "Git Feature Branch Workflow",
    "section": "Step 7 (optional): Merge latest master into your feature branch",
    "text": "Step 7 (optional): Merge latest master into your feature branch\nSwitch back to your feature branch\ngit checkout feature/name\nMERGE OR REBASE to avoid conflicts when the PR is reviewed or merged.\n\n\n\nmerge keeps the commit history of the branch ✅\n\n\n\nrebase rewrites commits, but keep the history of the branch clean ⚠️\n\n\nMerge the latest changes from master into your feature branch locally\ngit merge master\ngit push origin feature/name",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-8-optional-review-branch-differences-before-pr",
    "href": "git/git_feature_workflow.html#step-8-optional-review-branch-differences-before-pr",
    "title": "Git Feature Branch Workflow",
    "section": "Step 8 (optional): Review branch differences before PR",
    "text": "Step 8 (optional): Review branch differences before PR\n\n1/2 On GitHub: https://github.com/your-username//&lt;master…feature/name&gt;\n2/2 In terminal:\n\ngit diff --color-words master..feature/name",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-9-create-a-pull-request",
    "href": "git/git_feature_workflow.html#step-9-create-a-pull-request",
    "title": "Git Feature Branch Workflow",
    "section": "Step 9: Create a pull request",
    "text": "Step 9: Create a pull request\nYou can do this either:\n\n1/2 On GitHub: click 🔳 “Compare & pull request” or go to Pull Requests tab\n2/2 In terminal:\n\ngh pr create --base master --head feature/name --title \"feat: upd...\"",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-10-respond-to-code-review-if-needed",
    "href": "git/git_feature_workflow.html#step-10-respond-to-code-review-if-needed",
    "title": "Git Feature Branch Workflow",
    "section": "Step 10: Respond to code review (if needed)",
    "text": "Step 10: Respond to code review (if needed)\n…\nIf reviewers request changes:\ngit add .\ngit commit -m \"fix: addressed review comments\"\n# update the pull request\ngit push origin feature/name",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-11-merge-the-pull-request",
    "href": "git/git_feature_workflow.html#step-11-merge-the-pull-request",
    "title": "Git Feature Branch Workflow",
    "section": "Step 11: Merge the pull request",
    "text": "Step 11: Merge the pull request\nOn GitHub, choose your preferred merge method:\n\n\nSquash and merge: one commit for the whole branch added to master\n\n\nRebase and merge: replays commits on top of base branch, (linear history)\n\nMerge commit: adds a merge commit preserving all commits as-is (full history)\n\nThen confirm the merge.",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-12-pull-the-updated-master-locally",
    "href": "git/git_feature_workflow.html#step-12-pull-the-updated-master-locally",
    "title": "Git Feature Branch Workflow",
    "section": "Step 12: Pull the updated master locally",
    "text": "Step 12: Pull the updated master locally\nAfter merging the PR:\ngit checkout master\ngit pull origin master\nVerify branches\ngit branch -vv # * wkg_br abc1234 [origin/wkg_br] your commit message here\ngit log --graph --all --oneline --decorate",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "git/git_feature_workflow.html#step-13-optional-delete-the-feature-branch",
    "href": "git/git_feature_workflow.html#step-13-optional-delete-the-feature-branch",
    "title": "Git Feature Branch Workflow",
    "section": "Step 13 (optional): Delete the feature branch",
    "text": "Step 13 (optional): Delete the feature branch\nDelete your feature branch locally and remotely if it’s no longer needed.\ngit branch -d feature/name                 # local deletion\ngit push origin --delete feature/name     # remote deletion",
    "crumbs": [
      "git",
      "Git Feature Branch Workflow"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This is a Quarto website where I collect instructions for “nerdy” things.\n(Source: www.freepik.com/)"
  },
  {
    "objectID": "rstats.html",
    "href": "rstats.html",
    "title": "I ❤️ #rstats",
    "section": "",
    "text": "(Source: www.freepik.com/)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "I ❤️ #rstats"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html",
    "href": "rstats/01_tidyeval.html",
    "title": "Tidyeval and functional programming",
    "section": "",
    "text": "Caution\n\n\n\n\n\nWeb page construction in progress…\nlibrary(tidyverse)\nlibrary(rlang)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#non-standard-evaluation-in-tidyverse",
    "href": "rstats/01_tidyeval.html#non-standard-evaluation-in-tidyverse",
    "title": "Tidyeval and functional programming",
    "section": "Non-Standard evaluation in tidyverse\n",
    "text": "Non-Standard evaluation in tidyverse\n\n\n\nDEFUSING (DELAYING) function arguments: I can create a “quosure” with rlang::enquo() / rlang::enquos() so an expression can be examined, modified, and injected into other expressions.",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#two-complementary-forms-of-nse-used-in-tidyverse",
    "href": "rstats/01_tidyeval.html#two-complementary-forms-of-nse-used-in-tidyverse",
    "title": "Tidyeval and functional programming",
    "section": "Two (complementary) forms of NSE used in tidyverse\n",
    "text": "Two (complementary) forms of NSE used in tidyverse\n\n1) TIDY SELECTION is used in SELECTION VERBS\ne.g. in dplyr::select() across(), relocate(), rename() and pull() use tidy selection where expressions are either interpreted in the context of the data frame (e.g. c(cyl, am) or evaluated in the user environment (e.g. all_of(), starts_with())\n\n# EXE `across()`\nsummarise_mean &lt;- function(data, vars) {\n    # all variables selected by user... \n    data %&gt;% summarise(n = n(), across({{ vars }}, mean))\n}\n# call \nstarwars %&gt;% \n    group_by(homeworld) %&gt;% \n    # with where\n    summarise_mean(where(is.numeric))\n\n2) DATA MASKING used in ACTION VERBS\nACTION VERBS = dplyr::mutate(), ggplot2::aes(), arrange(), count(), filter(), group_by(), and summarise().\nNormal interactive programming (tidyverse) use data-masking, which allow you to use variables in the “current” data frame without any extra syntax. This:\n\n(+) makes it nicer to interactively work (no extra typing for data$column, just column), but\n(-) makes it harder to create your own functions (it could be ambiguous what is a data-variable and what is an env-variable).\n\n\n## ---  tidyverse non std eval \nstarwars %&gt;% \n filter (homeworld == \"Tatooine\")  \n\nSOOOOO We need some way to add $ back into the picture. Passing data-masked arguments to functions requires INJECTION (= quasiquotation), i.e. TO INJECT A FUNCTION ARGUMENT IN A DATA-MASKED CONTEST, YOU EMBRACE IT WITH {{\nInside data-masking function (actions), we can use injection operators:\n    + `{` embracing operator (`rlang`) OR\n        + [`enquo` followed by] `!!` operator (`base`) \n        + `...` + `...`\n    + varname_name `:=` function(`{{var}`)\n    + `.data` pronouns. \n    + `.env` pronouns.",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#defuse-nothing-inject-inside-custom-f",
    "href": "rstats/01_tidyeval.html#defuse-nothing-inject-inside-custom-f",
    "title": "Tidyeval and functional programming",
    "section": "1 Defuse (nothing!) + Inject {{ (inside custom f)",
    "text": "1 Defuse (nothing!) + Inject {{ (inside custom f)\n\n# -------- OR \ngrouped_mean_1 &lt;- function(df, group_var, summarize_var) {\n    df %&gt;% \n# Defuse and inject in a single step with the embracing operator\n    group_by({{group_var}} ) %&gt;% \n    summarize(mean = mean({{summarize_var}} , na.rm = TRUE))\n}\n\n# call\ngrouped_mean_1(\n  df = starwars, \n  group_var = sex, \n  summarize_var =  height \n)\n\n\n\n\n\n\n\nWarning\n\n\n\nWithout {group_var} I would get the error“! Must group by variables found in .data. ✖ Column group_var is not found.”",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#defuse-enquo-inject-inside-custom-f",
    "href": "rstats/01_tidyeval.html#defuse-enquo-inject-inside-custom-f",
    "title": "Tidyeval and functional programming",
    "section": "2 Defuse enquo + Inject !! (inside custom f)",
    "text": "2 Defuse enquo + Inject !! (inside custom f)\n\n# We can tell group_by() not to quote by using !! (pronounced “bang bang”). !! says something like “evaluate me!” or “unquote!”test \n\ngrouped_mean_2 &lt;- function(df, group_var, summarize_var) {\n    ## -- Defuse the user expression in `*_var`\n    group_var = enquo(group_var)\n    summarize_var = enquo(summarize_var)\n\n  df %&gt;% \n    ## -- Inject the expression contained in `*_var` \n    group_by(!!group_var) %&gt;% \n    summarize(mean = mean(!!summarize_var, na.rm = TRUE))\n}\n\n# call\ngrouped_mean_2(\n  df = starwars, \n  group_var = sex, \n  summarize_var =  height \n)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#defuse-...-inject-...",
    "href": "rstats/01_tidyeval.html#defuse-...-inject-...",
    "title": "Tidyeval and functional programming",
    "section": "3 Defuse ... + Inject ...\n",
    "text": "3 Defuse ... + Inject ...\n\nIn this case, summarize_var goes in front and ... last\n\n\n... can stand for multiple variables\n\n\n# ---- func \ngrouped_mean_3 &lt;- function(df,  summarize_var, ...) {\n  \n    ## -- Defuse the summarize_var = enquo(summarize_var) \n    ## ... group_var &gt;&gt;&gt;&gt; NO NEED FOR ENQUO with ... !\n    summarize_var = enquo(summarize_var)\n    \n    df %&gt;% \n        group_by(...) %&gt;% \n        summarize(mean = mean(!!summarize_var, na.rm = TRUE))\n}\n\n# ---- call\ngrouped_mean_3(\n    df = starwars, \n    sex, homeworld, # (...)\n    summarize_var =  height \n)\n\n\n\n\n\n\n\nTip\n\n\n\n{...} Basically we are saying “everything I throw at the function will be carried along until I want to evaluate it”",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#b-nothing-left-side",
    "href": "rstats/01_tidyeval.html#b-nothing-left-side",
    "title": "Tidyeval and functional programming",
    "section": "1b (nothing!) + {{ & left side := !!!!",
    "text": "1b (nothing!) + {{ & left side := !!!!\n\nSuper compact left side syntax with \"sometext_{{group_var}}\" :=\n\n\n\n# --- func\ngrouped_mean_1b &lt;- function(df, group_var, summarize_var) {\n    df %&gt;% \n        # Defuse and inject in a single step with the embracing operator\n        group_by({{group_var}} ) %&gt;% \n        summarize( \"BY_{{group_var}}\" := mean({{summarize_var}} , na.rm = TRUE))\n}\n\n# --- call\ngrouped_mean_1b (\n    df = starwars, \n    group_var = sex, \n    summarize_var =  height \n)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#b-enquo-left-side",
    "href": "rstats/01_tidyeval.html#b-enquo-left-side",
    "title": "Tidyeval and functional programming",
    "section": "2b enquo + !! & left side :=\n",
    "text": "2b enquo + !! & left side :=\n\n2 things needed here :\n+  `as_label(enquo(____var))`\n+  left side syntax with `!!str_c(\"Mean_\", ____var) :=`\n\n# --- func\ngrouped_mean_2b &lt;- function(df, group_var, summarize_var) {\n    ## -- Defuse the user expression in `*_var`\n    group_var = enquo(group_var)\n    summarize_var = as_label(enquo(summarize_var)) # as_label(enquo !!!!!\n    \n    df %&gt;% \n        ## -- Inject the expression contained in `*_var` \n        group_by(!!group_var) %&gt;% \n        summarize(!!str_c(\"Mean_\", summarize_var) := mean(!!summarize_var, na.rm = TRUE))\n}\n\n# --- call\ngrouped_mean_2b(df = starwars, \n                     group_var = sex, \n                     summarize_var =  height \n)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#b-...-...-left-side",
    "href": "rstats/01_tidyeval.html#b-...-...-left-side",
    "title": "Tidyeval and functional programming",
    "section": "3b ... + ... & left side :=\n",
    "text": "3b ... + ... & left side :=\n\n\n## --  define function \ngrouped_mean_3b &lt;- function(df,  summarize_var, ...) {\n#   group_var = ...  NO NEED FOR ENQUO!\n    summarize_var = enquo(summarize_var)\n    summarize_var_name &lt;- as_label(enquo(summarize_var))\n    \n    df %&gt;% \n        group_by(...) %&gt;% \n    #   summarize(!!summarize_var_name := mean(!!summarize_var, na.rm = TRUE))\n    # or  \n    summarize(!!str_c(\"My_mean_\", summarize_var_name) := mean(!!summarize_var, na.rm = TRUE))\n    # ERRORE ?!?!?!?\n    # summarize(str_c(\"Mean_\", !!summarize_var_name) := mean(!!summarize_var, na.rm = TRUE))\n}\n\n## --  call function\ngrouped_mean_3b(df = starwars, \n                     sex, homeworld, #  group_var\n                     summarize_var =  height \n)\n\n\n\n\n\n\n\nWarning\n\n\n\nOKKIO!!! Strange enough… seems like the unquoting must be of the WHOLE left-side of the equation not just of the quoted variable as I thought + !!summarize_var_name :=  ... OK + !!str_c(\"Mean_\", summarize_var_name) :=  ... OK: xchè?????? + str_c(\"Mean_\", !!summarize_var_name) :=  ... WRONG: xchè??????",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#c-inject-specify-.data",
    "href": "rstats/01_tidyeval.html#c-inject-specify-.data",
    "title": "Tidyeval and functional programming",
    "section": "1.c Inject {{ + specify .data\n",
    "text": "1.c Inject {{ + specify .data\n\nAdding a new generic function argument data (up until now I was hardcoding it when executing the function)\nSimple data\n\n\nstarwars &lt;- starwars\n\n## -- write function\nmy_sum &lt;- function(data, num_var) {\n    data %&gt;%\n        dplyr::group_by(data$homeworld) %&gt;%\n        # num_var or sum will not work!\n        dplyr::summarise(\n            \"weighted_count_{{num_var}}\" := sum( {{ num_var }}, na.rm = TRUE ))\n    }\n\n## --  call function\nmy_sum (starwars, mass) \n\nWith .data pronoun\nThe .data pronoun is a tidy eval feature that is enabled in all data-masked arguments, just like {{\n\n## -- write function\nmy_sum2 &lt;- function(data, num_var) {\n    # no`.` here!!!\n    data %&gt;%\n        dplyr::group_by(.data$homeworld) %&gt;%\n        # num_var or sum will not work!\n        dplyr::summarise(\n            \"weighted_count_{{num_var}}\" := sum( {{ num_var }}, na.rm = TRUE ))\n}\n\n## --  call function\nmy_sum2 (starwars, mass) \n\nWith .data[[var]] pronoun\n\nIf you have a variable name in a string, use the .data pronoun to subset that variable with [[.\n\n\n## -- write function\nmy_sum3 &lt;- function(data, num_var, group_var) {\n    # no`.` here!!!\n    data %&gt;%\n        dplyr::group_by(.data[[group_var]]) %&gt;%\n        # num_var or sum will not work!\n        dplyr::summarise(\n            \"weighted_count_{{num_var}}\" := sum( {{ num_var }}, na.rm = TRUE ))\n}\n\ngroup_var &lt;- \"homeworld\"\n## --  call function\nmy_sum3 (starwars, mass, group_var)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#option-1-purrr-existing-function-.f",
    "href": "rstats/01_tidyeval.html#option-1-purrr-existing-function-.f",
    "title": "Tidyeval and functional programming",
    "section": "Option 1) purrr + existing function .f…",
    "text": "Option 1) purrr + existing function .f…\n\nmy big “gotcha” here is I must not specify .x in the arguments after .f as I kept doing… 🤯\n\n\n## -- using function `my_mean` with:\ngroup_var_vec &lt;- c(\"homeworld\", \"species\", \"sex\") \n\n# map returns a list \ngroupmeans_l  &lt;-  map(.x = group_var_vec, #  x \n                             .f = my_mean,   # function  NO ()\n                             data = starwars, # ADDITIONAL arguments \n                             num_var = height)\n#, group_var = .x)  \n\n\ngroupmeans_l[[3]]",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#option-2-purrr-anonymous-function-as-formula-fun",
    "href": "rstats/01_tidyeval.html#option-2-purrr-anonymous-function-as-formula-fun",
    "title": "Tidyeval and functional programming",
    "section": "Option 2) purrr + anonymous function as formula ~ fun()\n",
    "text": "Option 2) purrr + anonymous function as formula ~ fun()\n\n\n🤔🤷🏻‍♀️not quite sure why it should be “anonymous” given that I gave it a name… but it works nonetheless\n\n\n## -- using function `my_mean` with:\ngroupmeans_l_tilde &lt;- map(.x = group_var_vec, \n                                  ~my_mean(        # function  YESS!! ()\n                                    data = starwars, num_var = height, group_var = .x) # ALL arguments \n)\n\ngroupmeans_l_tilde[[3]] \npluck(groupmeans_l_tilde, 3)\n\nBTW map can output a row-binded df here\n\n# map returns dataframes binded by row \ngroupmeans_dfr &lt;- map_dfr(.x = group_var_vec, # x \n                                  ~my_mean(        # function  YESS!! ()\n                                    data = starwars, num_var = height, group_var = .x) # ALL arguments \n)\n\ngroupmeans_dfr",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#tidyeval-in-purrr-custom-function",
    "href": "rstats/01_tidyeval.html#tidyeval-in-purrr-custom-function",
    "title": "Tidyeval and functional programming",
    "section": "Tidyeval in purrr + custom function",
    "text": "Tidyeval in purrr + custom function\n1/2 single (group, num) function\n\nmy_mean_2  &lt;- function(data, group_var, num_var) {\n    quo_group_var &lt;- enquo(group_var)\n    quo_num_var &lt;- enquo(num_var)\n    # no`.` here!!!\n    data %&gt;%\n        dplyr::group_by(.data[[!! quo_group_var]]) %&gt;%\n        dplyr::summarise(\n            \"mean_of_{{quo_num_var}}\" := mean( !!quo_num_var, na.rm = TRUE ))\n}\n\n# test YEAH\ntest1 &lt;- my_mean_2(data = starwars, group_var = sex, num_var =height) \n\n2/2 map function\n\ngroup_var &lt;- c(\"gender\", \"species\")\nnum_var &lt;- c(\"height\", \"birth_year\")\n\ntidy_map_df3 &lt;- map2(.x = group_var, \n                            .y = num_var ,\n                            ~my_mean_2,\n                            data = starwars\n) \ntidy_map_df3\n\nhttps://stackoverflow.com/questions/47870838/how-to-loop-over-a-tidy-eval-function-using-purrr\n\nvars &lt;- train %&gt;% select(ends_with(\"bin\")) %&gt;% colnames()\n\nvars %&gt;%\n# create a symbol (defused expressions that represent objects in environments)\n  syms() %&gt;%\n  map(function(var) get_charts(!!var))\n\n# test YEAH\ntest2 &lt;- my_mean(data = starwars, group_var = sex, num_var =height)",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "rstats/01_tidyeval.html#digression-pluck",
    "href": "rstats/01_tidyeval.html#digression-pluck",
    "title": "Tidyeval and functional programming",
    "section": "[digression] pluck\n",
    "text": "[digression] pluck\n\n\n# build list \nmovies &lt;- c(\"A New Hope\",\n            \"The Empire Strikes Back\",\n            \"Return of the Jedi\",\n            \"Phantom Menace\",\n            \"Attack of the Clones\",\n            \"Revenge of the Sith\",\n            \"The Force Awakens\",\n            \"The Last Jedi\",\n            \"Rise of Skywalker\")\n\nyears &lt;- c(1977, 1980, 1983, 1999, 2002, 2005, 2015, 2017, 2019)\n\nfilm_l &lt;- list(movies, years,\n                preference = c(2, 1, 3, 7, 8, 9, 4, 6, 5))\n\nHere is an esasier way to extract elements from lists\n\n# 1st df and 1st column of it \nfilm_l[[1]][1]\n\npluck(film_l,1,1)\n\n… which can go insude a pipe\n\n#pipe in our list \nfilm_l %&gt;% \n    #and grab the first list element, the movie title;\n    pluck(1) %&gt;% \n    # take each movie title and extract the last word from it using the word function.\n    map_chr(~ word(., -1))",
    "crumbs": [
      "{{< fa brands r-project >}} programming",
      "Tidyeval and functional programming"
    ]
  },
  {
    "objectID": "shell/shell_func.html",
    "href": "shell/shell_func.html",
    "title": "My own functions in shell",
    "section": "",
    "text": "Great (paid) LinkedIn course by Kevin Skoglund “Unix essential training”",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#cli-commands",
    "href": "shell/shell_func.html#cli-commands",
    "title": "My own functions in shell",
    "section": "CLI commands",
    "text": "CLI commands\n\n\nCtrl + C = Cancel/stop the current command (SIGINT)\n\nCtrl + Z = Pause current command (suspend, SIGTSTP)\n\n\nfg Resume the last paused command\n\n\n\nCtrl + a = start of the command\n\nCtrl + e = end of the command\n\nq = close dialogue\n\nCtrl + L → clears the terminal screen (but not history)",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#shell-functions-syntax",
    "href": "shell/shell_func.html#shell-functions-syntax",
    "title": "My own functions in shell",
    "section": "Shell functions’ syntax",
    "text": "Shell functions’ syntax\n\n\n$ = In shell scripting is used to reference or access a variable’s value\n\n:- = sets default value if empty\n\n# = Anchors the pattern to the beginning of the string (like ^ in regex).\n\n%.* = Removes the shortest match of the pattern from the end (gz) of the string (archive.tar.gz –&gt; archive.tar)\n\n%%.* = Removes the longest match of the pattern from the end (tar.gz) of the string (archive.tar.gz –&gt; archive)\n\nchmod -x ... = Make the script executable (it is only needed once, unless you change the script)",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#opening-modifying-.zshrc-file",
    "href": "shell/shell_func.html#opening-modifying-.zshrc-file",
    "title": "My own functions in shell",
    "section": "Opening & modifying ~/.zshrc file",
    "text": "Opening & modifying ~/.zshrc file\n\n# Open/change  the file in nano editor\nnano ~/.zshrc\n# change | Ctrl + X | Y | Enter\n\n# open \nopen ~/.zshrc #then save \n\n# Reload your configuration file\nsource ~/.zshrc",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#looking-into-scripts-dir",
    "href": "shell/shell_func.html#looking-into-scripts-dir",
    "title": "My own functions in shell",
    "section": "Looking into ~/scripts dir",
    "text": "Looking into ~/scripts dir\n\n# List all files in the directory\nls ~/scripts\n# List all files in the directory with details\nls -l ~/scripts\n# List all files in the directory with details and hidden files\nls -la ~/scripts\n# List all files in the directory with details and hidden files and human readable sizes\nls -lah ~/scripts\n\nFor example\n\n# List all files in the directory | with .sh extension | with details and human readable sizes \nls -lh ~/scripts/*.sh  \n        #-rwxr-xr-x@ 1 luisamimmi  staff   1.5K May  8 00:12 /Users/luisamimmi/scripts/compress_pdf.sh\n        #-rwxr-xr-x@ 1 luisamimmi  staff   1.6K May  8 00:36 /Users/luisamimmi/scripts/compress_pdf_interactive.sh\n        #-rwxr-xr-x@ 1 luisamimmi  staff   3.7K May  8 11:52 /Users/luisamimmi/scripts/compress_pdf_interactive_choice.sh\n        #-rwxr-xr-x@ 1 luisamimmi  staff   1.7K May  5 16:21 /Users/luisamimmi/scripts/look4files.sh\n        #-rwxr-xr-x@ 1 luisamimmi  staff   1.8K May  8 00:02 /Users/luisamimmi/scripts/look4files_interactive.sh\n\n\n# How is the file look4files.sh?\ncat ~/scripts/look4files.sh\ntype ~/scripts/look4files.sh",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#look4files.sh",
    "href": "shell/shell_func.html#look4files.sh",
    "title": "My own functions in shell",
    "section": "1) look4files.sh\n",
    "text": "1) look4files.sh\n\n\nThis function will look for a specific &lt;string&gt; in files with extensions &lt;(PDF, docx, doc, md, R, qmd)&gt; in &lt;given path&gt;\n\nIf a &lt;given path&gt; is not provided, it will look in the current working directory.\n\n\n\n\n# Run by executing the script\nlook4files.sh \"search_string\" /path/to/directory\n\n# ... or just \nlook4files.sh \"search_string\" # in ./ \n\nThe script can be downloaded here: ⬇️ look4files.sh",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#look4files_interactive.sh",
    "href": "shell/shell_func.html#look4files_interactive.sh",
    "title": "My own functions in shell",
    "section": "2) look4files_interactive.sh\n",
    "text": "2) look4files_interactive.sh\n\nBetter yet, this one will prompt from the CLI for the search string and the path to search in.\n\n# It is enough to write this in the terminal!\n~/scripts/look4files_interactive.sh\n# ... or (since I created an ALIAS for it in my .zshrc file)\nlook4\n\nThe script can be downloaded here: ⬇️ look4",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  },
  {
    "objectID": "shell/shell_func.html#compress_pdf_interactive_choice.sh",
    "href": "shell/shell_func.html#compress_pdf_interactive_choice.sh",
    "title": "My own functions in shell",
    "section": "3) compress_pdf_interactive_choice.sh\n",
    "text": "3) compress_pdf_interactive_choice.sh\n\nSimilar to the previous one, but this one will compress PDF files in a given directory.\n\nit provides 2 options for the level of compression:\n\nstandard\naggressive\n\n\n\n\n# It is enough to write this in the terminal!\n~/scripts/compress_pdf_interactive_choice.sh\n# ... or (since I created an ALIAS for it in my .zshrc file)\nshrinkPDF\n\nThe script can be downloaded here: ⬇️ shrinkPDF",
    "crumbs": [
      "Shell",
      "My own functions in shell"
    ]
  }
]